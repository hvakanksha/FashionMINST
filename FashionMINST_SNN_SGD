{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hvakanksha/FashionMINST/blob/main/FashionMINST_SNN_SGD\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fy6lKXkPLZvJ"
      },
      "outputs": [],
      "source": [
        "# To load the mnist data\n",
        "from keras.datasets import fashion_mnist\n",
        "from tensorflow.keras.models import Sequential\n",
        " \n",
        "# importing various types of hidden layers\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten\n",
        " \n",
        "# Adam optimizer for better LR and less loss\n",
        "from tensorflow.keras.optimizers import SGD\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AS2MSZdiMCqF",
        "outputId": "99f5fe2a-ba83-4da5-ef0c-93b5f762f838"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n",
            "29515/29515 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
            "26421880/26421880 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
            "5148/5148 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
            "4422102/4422102 [==============================] - 0s 0us/step\n",
            "Train: X =  (60000, 28, 28)\n",
            "Test: X =  (10000, 28, 28)\n"
          ]
        }
      ],
      "source": [
        "# Split the data into training and testing\n",
        "(trainX, trainy), (testX, testy) = fashion_mnist.load_data()\n",
        " \n",
        "# Print the dimensions of the dataset\n",
        "print('Train: X = ', trainX.shape)\n",
        "print('Test: X = ', testX.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "id": "qMKmUFjeMb0N",
        "outputId": "e4e60246-162b-4e8c-ebab-384ca70084b3"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 9 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "for i in range(1, 10):\n",
        "    # Create a 3x3 grid and place the\n",
        "    # image in ith position of grid\n",
        "    plt.subplot(3, 3, i)\n",
        "    # Insert ith image with the color map 'grap'\n",
        "    plt.imshow(trainX[i], cmap=plt.get_cmap('gray'))\n",
        " \n",
        "# Display the entire plot\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6-hLCUH4NIEN",
        "outputId": "348e275b-9306-4b7f-9343-4bbb6044863f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(60000, 28, 28, 1)\n"
          ]
        }
      ],
      "source": [
        "trainX = np.expand_dims(trainX, -1)\n",
        "testX = np.expand_dims(testX, -1)\n",
        " \n",
        "print(trainX.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "C2p7anbXNRL1"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SXOyFux1N1uE"
      },
      "outputs": [],
      "source": [
        "def model_arch():\n",
        "    models = Sequential()\n",
        "     \n",
        "    models.add(Conv2D(64, (5, 5),\n",
        "                      padding=\"same\",\n",
        "                      activation=\"relu\",\n",
        "                      input_shape=(28, 28, 1)))\n",
        "     \n",
        "    models.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "    models.add(Conv2D(128, (5, 5), padding=\"same\",\n",
        "                      activation=\"relu\"))\n",
        "     \n",
        "    models.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "    models.add(Conv2D(256, (5, 5), padding=\"same\",\n",
        "                      activation=\"relu\"))\n",
        "     \n",
        "    models.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "     \n",
        "    models.add(Flatten())\n",
        "    models.add(Dense(256, activation=\"relu\"))\n",
        "     \n",
        "    models.add(Dense(10, activation=\"softmax\"))\n",
        "    return models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zyPjIHOFXk4s"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rzYw2-SgONK8",
        "outputId": "37c4b37f-c118-4347-ea39-79ac35a3fe82"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 28, 28, 64)        1664      \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 14, 14, 64)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 14, 14, 128)       204928    \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPooling  (None, 7, 7, 128)        0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " conv2d_2 (Conv2D)           (None, 7, 7, 256)         819456    \n",
            "                                                                 \n",
            " max_pooling2d_2 (MaxPooling  (None, 3, 3, 256)        0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 2304)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 256)               590080    \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 10)                2570      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,618,698\n",
            "Trainable params: 1,618,698\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "model = model_arch()\n",
        " \n",
        "model.compile(optimizer=SGD(learning_rate=1e-3),\n",
        "              loss='sparse_categorical_crossentropy',\n",
        "              metrics=['sparse_categorical_accuracy'])\n",
        " \n",
        "model.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ENR4CHe2cITi",
        "outputId": "9bbc0666-7dec-47ab-e289-5202d5a951ec"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d_3 (Conv2D)           (None, 28, 28, 64)        1664      \n",
            "                                                                 \n",
            " max_pooling2d_3 (MaxPooling  (None, 14, 14, 64)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " conv2d_4 (Conv2D)           (None, 14, 14, 128)       204928    \n",
            "                                                                 \n",
            " max_pooling2d_4 (MaxPooling  (None, 7, 7, 128)        0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " conv2d_5 (Conv2D)           (None, 7, 7, 256)         819456    \n",
            "                                                                 \n",
            " max_pooling2d_5 (MaxPooling  (None, 3, 3, 256)        0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten_1 (Flatten)         (None, 2304)              0         \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 256)               590080    \n",
            "                                                                 \n",
            " dense_3 (Dense)             (None, 10)                2570      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,618,698\n",
            "Trainable params: 1,618,698\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "model = model_arch()\n",
        " \n",
        "model.compile(optimizer=SGD(learning_rate=1e-3),\n",
        "              loss='sparse_categorical_crossentropy',\n",
        "              metrics=['sparse_categorical_accuracy'])\n",
        " \n",
        "model.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YLc9cj_9OQRU",
        "outputId": "2d89d21c-06f6-4004-b0e2-f80db3eef232"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/15\n",
            "100/100 [==============================] - 470s 5s/step - loss: 2.2397 - sparse_categorical_accuracy: 0.6463 - val_loss: 0.6687 - val_sparse_categorical_accuracy: 0.7730\n",
            "Epoch 2/15\n",
            "100/100 [==============================] - 469s 5s/step - loss: 0.5741 - sparse_categorical_accuracy: 0.7980 - val_loss: 0.5011 - val_sparse_categorical_accuracy: 0.8227\n",
            "Epoch 3/15\n",
            "100/100 [==============================] - 488s 5s/step - loss: 0.4940 - sparse_categorical_accuracy: 0.8273 - val_loss: 0.4556 - val_sparse_categorical_accuracy: 0.8406\n",
            "Epoch 4/15\n",
            "100/100 [==============================] - 484s 5s/step - loss: 0.4522 - sparse_categorical_accuracy: 0.8415 - val_loss: 0.4588 - val_sparse_categorical_accuracy: 0.8394\n",
            "Epoch 5/15\n",
            "100/100 [==============================] - 491s 5s/step - loss: 0.4234 - sparse_categorical_accuracy: 0.8511 - val_loss: 0.4119 - val_sparse_categorical_accuracy: 0.8556\n",
            "Epoch 6/15\n",
            "100/100 [==============================] - 482s 5s/step - loss: 0.3965 - sparse_categorical_accuracy: 0.8610 - val_loss: 0.3870 - val_sparse_categorical_accuracy: 0.8645\n",
            "Epoch 7/15\n",
            "100/100 [==============================] - 483s 5s/step - loss: 0.3803 - sparse_categorical_accuracy: 0.8678 - val_loss: 0.4060 - val_sparse_categorical_accuracy: 0.8572\n",
            "Epoch 8/15\n",
            "100/100 [==============================] - 491s 5s/step - loss: 0.3551 - sparse_categorical_accuracy: 0.8752 - val_loss: 0.4504 - val_sparse_categorical_accuracy: 0.8336\n",
            "Epoch 9/15\n",
            "100/100 [==============================] - 466s 5s/step - loss: 0.3495 - sparse_categorical_accuracy: 0.8772 - val_loss: 0.3680 - val_sparse_categorical_accuracy: 0.8701\n",
            "Epoch 10/15\n",
            "100/100 [==============================] - 463s 5s/step - loss: 0.3395 - sparse_categorical_accuracy: 0.8805 - val_loss: 0.3514 - val_sparse_categorical_accuracy: 0.8774\n",
            "Epoch 11/15\n",
            "100/100 [==============================] - 466s 5s/step - loss: 0.3259 - sparse_categorical_accuracy: 0.8856 - val_loss: 0.3486 - val_sparse_categorical_accuracy: 0.8781\n",
            "Epoch 12/15\n",
            "100/100 [==============================] - 454s 5s/step - loss: 0.3196 - sparse_categorical_accuracy: 0.8871 - val_loss: 0.3535 - val_sparse_categorical_accuracy: 0.8756\n",
            "Epoch 13/15\n",
            "100/100 [==============================] - 446s 4s/step - loss: 0.3106 - sparse_categorical_accuracy: 0.8916 - val_loss: 0.3357 - val_sparse_categorical_accuracy: 0.8824\n",
            "Epoch 14/15\n",
            "100/100 [==============================] - 445s 4s/step - loss: 0.3020 - sparse_categorical_accuracy: 0.8927 - val_loss: 0.3591 - val_sparse_categorical_accuracy: 0.8734\n",
            "Epoch 15/15\n",
            "100/100 [==============================] - 446s 4s/step - loss: 0.2932 - sparse_categorical_accuracy: 0.8967 - val_loss: 0.3467 - val_sparse_categorical_accuracy: 0.8799\n"
          ]
        }
      ],
      "source": [
        "history = model.fit(\n",
        "    trainX.astype(np.float32), trainy.astype(np.float32),\n",
        "    epochs=15,\n",
        "    steps_per_epoch=100,\n",
        "    validation_split=0.33\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Cy8dZCRXOUVE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "8160c686-24a5-48de-b3b0-8e30812d6d65"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.plot(history.history['sparse_categorical_accuracy'])\n",
        "plt.plot(history.history['val_sparse_categorical_accuracy'])\n",
        "plt.title('Model Accuracy')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'val'], loc='upper left')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "roJiNpylWYW6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "6fbf4b08-b422-40b0-b5f1-c51e9683fa67"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Loss vs Epoch plot\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('Model Accuracy')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'val'], loc='upper left')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "unqZ4qRWlm37"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gjMUcGlqlm0o"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YwNCYwXnlmzG"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lonKiOMslmwj"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "am0DPfevlmt3"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}